name: CI

on:
  push:
    branches: ["master"]

env:
  REGISTRY_IMAGE: lurian/base-bot
  IMAGE_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      POETRY_NO_INTERACTION: 1
      POETRY_VIRTUALENVS_IN_PROJECT: 1
      POETRY_VIRTUALENVS_CREATE: 1

    steps:
      - uses: actions/checkout@v3

      - name: install python3
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-cache

      - name: Run tests
        run: poetry run python -m pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        platform: [ linux/arm64, linux/amd64 ]

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: startsWith(matrix.target, 'aarch64')

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            BINARY_PATH=target/${{ matrix.target }}/release/scraper-worker
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"      

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ env.IMAGE_TAG }} \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.IMAGE_TAG }}

  deploy-ssh:
    if: false
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker pull ${{ env.REGISTRY_IMAGE }}:${{ env.IMAGE_TAG }}
            docker stop ${{ secrets.CONTAINER_NAME }}
            docker rm ${{ secrets.CONTAINER_NAME }}
            docker run --name "${{ secrets.CONTAINER_NAME }}" \
            -e "DB_PATH=/data/bot.db" \
            -e "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" \
            -e "FIRST_ADMIN=${{ secrets.FIRST_ADMIN }}" \
            -e "LOGGING_CHANNEL=${{ secrets.LOGGING_CHANNEL }}" \
            -v ~/${{ secrets.CONTAINER_NAME }}:/data \
            ${{ secrets.DOCKERHUB_TARGET }}
